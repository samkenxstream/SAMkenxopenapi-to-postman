openapi: "3.0.0"
info:
  version: 1.0.10
  title: Petstore 224
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Postman
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-postman-projectname: PostmanPetstore

paths:
  /pets:
    parameters:
      - name: GlobalParam
        in: query
        schema:
          type: string
      - name: GlobalCookie
        in: cookie
        schema:
          type: string
    post:
      description: Creates a new pet in the store. Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        201:
          description: Pet was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                WIFI:
                  value:
                    $ref: "./example_value.yml"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    parameters:
      - name: id
        in: path
        description: ID of pet to work with in operations
        required: true
        schema:
          type: integer
          format: int64
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Replaces Pet with contents
      operationId: replacePet
      requestBody:
        description: Pet to replace with
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        200:
          description: Pet updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates Pet with contents
      operationId: UPDATEPET
      requestBody:
        description: Pet to update with
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stores:
    get:
      description: Retrieves contents of stores
      operationId: GetAllStores
      responses:
        200:
          description: Returns list of Store items
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                    typeOf:
                      type: string
                      enum: [Cat, Dog, Bird, Reptile]
                    tag:
                      type: string
                    value:
                      type: number
                      format: float
                      description: price
                    saleValue:
                      type: number
                      format: float
                      description: price if on sale
                    onSale:
                      type: boolean
                      default: false
                      description: True if item is on sale, false if not.
        400:
          description: No items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Something went wrong on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stores/{id}:
    get:
      parameters:
        - name: id
          in: path
          description: ID of store to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stores/{id}/pets:
    get:
      parameters:
        - name: id
          in: path
          description: ID of store to fetch
          required: true
          schema:
            type: integer
            format: int64
      description: Retrieves contents of stores
      operationId: GetAllPetsForStoreById
      responses:
        200:
          description: Returns list of Store items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'

        400:
          description: No items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Something went wrong on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pet:
      type: object
      description: A pet
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        typeOf:
          type: string
          enum: [Cat, Dog, Bird, Reptile]
        tag:
          type: string

    Pets:
      type: object
      properties:
        id:
            type: integer

    StoreItem:
      description: Single store item
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        typeOf:
          type: string
          enum: [ Cat, Dog, Bird, Reptile ]
        tag:
          type: string
        value:
          type: number
          format: float
          description: price
        saleValue:
          type: number
          format: float
          description: price if on sale
        onSale:
          type: boolean
          default: false
          description: True if item is on sale, false if not.

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
